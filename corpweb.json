{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
      "InstanceType": {
        "Description": "Server instance type",
        "Type": "String",
        "Default": "t2.micro",
        "AllowedValues": ["t2.micro", "t2.small"],
        "ConstraintDescription": "Must be a valid EC2 type."
      },
      "KeyPair": {
        "Description": "Name of your EC2 keypair to enable SSH access",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription": "Must be the name of an existing KeyPair"
      },
      "YourIp": {
        "Description": "The current IP address of your workstation (x.x.x.x/32)",
        "Type": "String"
      }
    },
    "Resources": {
      "EngineeringVpc": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": "10.0.0.0/18",
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "Tags": [{"Key": "Name", "Value": "EngineeringVpc"}]
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway"
      },
      "VPCGatewayAttachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "InternetGatewayId": {"Ref": "InternetGateway"},
          "VpcId": {"Ref": "EngineeringVpc"}
        }
      },
      "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "CidrBlock": "10.0.0.0/24",
          "MapPublicIpOnLaunch": "true",
          "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
          "Tags": [{"Key": "Name", "Value": "PublicSubnet1"}]
        }
      },
      "PublicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "CidrBlock": "10.0.1.0/24",
          "MapPublicIpOnLaunch": "true",
          "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
          "Tags": [{"Key": "Name", "Value": "PublicSubnet2"}]
        }
      },
      "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "Tags": [{"Key": "Name", "Value": "PublicRouteTable"}]
        }
      },
      "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "RouteTableId": {"Ref": "PublicRouteTable"},
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {"Ref": "InternetGateway"}
        }
      },
      "PublicSubnet1RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {"Ref": "PublicSubnet1"},
          "RouteTableId": {"Ref": "PublicRouteTable"}
        }
      },
      "PublicSubnet2RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {"Ref": "PublicSubnet2"},
          "RouteTableId": {"Ref": "PublicRouteTable"}
        }
      },
      "WebserversSG": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "GroupDescription": "Security group for web servers",
          "SecurityGroupIngress": [
            {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "YourIp"}},
            {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"}
          ]
        }
      },
      "EngineeringLB": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "DependsOn": ["WebserversSG", "PublicSubnet1", "PublicSubnet2"],
        "Properties": {
          "Subnets": [{"Ref": "PublicSubnet1"}, {"Ref": "PublicSubnet2"}],
          "SecurityGroups": [{"Ref": "WebserversSG"}],
          "Scheme": "internet-facing"
        }
      },
      "EngineeringWebservers": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "VpcId": {"Ref": "EngineeringVpc"},
          "Protocol": "HTTP",
          "Port": 80,
          "TargetType": "instance",
          "HealthCheckProtocol": "HTTP",
          "HealthCheckPath": "/"
        }
      },
      "LBListener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "LoadBalancerArn": {"Ref": "EngineeringLB"},
          "Protocol": "HTTP",
          "Port": 80,
          "DefaultActions": [{"Type": "forward", "TargetGroupArn": {"Ref": "EngineeringWebservers"}}]
        }
      }
    },
    "Outputs": {
      "WebUrl": {
        "Value": {"Fn::GetAtt": ["EngineeringLB", "DNSName"]},
        "Description": "Load balancer DNS name"
      }
    }
  }
  